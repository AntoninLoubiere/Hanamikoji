===
API
===

..
   This file was generated by stechec2-generator. DO NOT EDIT.


Introduction
============

Les `Geisha <jeu.html#description-generale>`_ sont représentées par des entiers de 0
à 6 représentant dans l'ordre les trois Geisha à deux cartes, les deux Geisha à trois cartes, la
Geisha à quatre cartes et la Geisha à cinq cartes.

Les cartes sont représentées par des entiers de 0 à 6 correspondant à la Geisha représentée par la
carte.


Constantes
==========

.. c:var:: int NB_GEISHA

  :Valeur: 7
  :Description:
    Les 7 geisha (2, 2, 2, 3, 3, 4, 5)
.. c:var:: int NB_CARTES_TOTAL

  :Valeur: 21
  :Description:
    Le nombre total de cartes (2 + 2 + 2 + 3 + 3 + 4 + 5)
.. c:var:: int NB_CARTES_DEBUT

  :Valeur: 6
  :Description:
    Le nombre de cartes que chaque personne a au début
.. c:var:: int NB_CARTES_ECARTEES

  :Valeur: 1
  :Description:
    Le nombre de cartes écartées au début du jeu
.. c:var:: int NB_ACTIONS

  :Valeur: 4
  :Description:
    Le nombre total d'action que chaque joueur devra faire
.. c:var:: int NB_MANCHES_MAX

  :Valeur: 3
  :Description:
    Le nombre total de manches avant la fin de la partie
.. c:var:: char *GEISHA_VALEUR

  :Valeur: "2|2|2|3|3|4|5"
  :Description:
    La valeur (et le nombre de cartes) de chaque geisha séparée par des |

Énumérations
============

.. c:type:: action

  :Description:
      Les actions de jeu
  :Valeurs:
      :VALIDER:
        Valide une unique carte
      :DEFAUSSER:
        Defausse deux cartes
      :CHOIX_TROIS:
        Donne le choix entre trois cartes
      :CHOIX_PAQUETS:
        Donne le choix entre deux paquets de deux cartes
      :PREMIER_JOUEUR:
        Aucune action n'a été jouée (utilisé dans tour_precedent)
.. c:type:: error

  :Description:
      Enumeration contentant toutes les erreurs possibles
  :Valeurs:
      :OK:
        pas d'erreur
      :ACTION_DEJA_JOUEE:
        l'action a déjà été jouée
      :CARTES_INVALIDES:
        vous ne pouvez pas jouer ces cartes
      :PAQUET_INVALIDE:
        ce paquet n'existe pas
      :GEISHA_INVALIDES:
        cette geisha n'existe pas (doit être un entier entre 0 et NB_GEISHA)
      :JOUEUR_INVALIDE:
        ce joueur n'existe pas
      :CHOIX_INVALIDE:
        vous ne pouvez pas repondre à ce choix
      :ACTION_INVALIDE:
        vous ne pouvez pas jouer cette action maintenant
.. c:type:: joueur

  :Description:
      Enumeration représentant les différents joueurs
  :Valeurs:
      :JOUEUR_1:
        Le joueur 1
      :JOUEUR_2:
        Le joueur 2
      :EGALITE:
        Égalité, utilisé uniquement dans possession_geisha

Structures
==========

.. c:type:: action_jouee

  .. code-block:: c

    struct action_jouee {
        action act;
        int c1;
        int c2;
        int c3;
        int c4;
    };

  :Description: La description d'une action jouée

  :Champs:
    :act: L'action jouée
    :c1: Si act==VALIDER ou act==DEFAUSSER, -1 sinon la première carte (du premier paquet)
    :c2: Si act==V|D: -1 sinon la deuxième carte (du premier paquet)
    :c3: Si act==V|D: -1 sinon la troisième carte (ou la première carte du second paquet si act==choix paquet)
    :c4: Si act!=choix paquet: -1 sinon la deuxième carte du second paquet

Fonctions
=========

.. c:function:: joueur id_joueur()

    Renvoie l'identifiant du joueur




.. c:function:: joueur id_adversaire()

    Renvoie l'identifiant de l'adversaire




.. c:function:: int manche()

    Renvoie le numéro de la manche (indexé à 0)




.. c:function:: int tour()

    Renvoie le numéro de la manche (indexé à 0)




.. c:function:: action_jouee tour_precedent()

    Renvoie l'action jouée par l'adversaire




.. c:function:: int nb_carte_validee(joueur j, int g)

    Renvoie le nombre de carte validée par le joueur pour la geisha



    :param j: Le joueur
    :param g: La geisha

.. c:function:: joueur possession_geisha(int g)

    Renvoie qui possède la geisha



    :param g: La geisha

.. c:function:: bool est_jouee_action(joueur j, action a)

    Renvoie si l'action a déjà été jouée par le joueur



    :param j: Le joueur
    :param a: L'action

.. c:function:: int nb_cartes(joueur j)

    Renvoie le nombre de carte que le joueur a



    :param j: Le joueur

.. c:function:: int_array cartes_en_main()

    Renvoie les cartes que vous avez




.. c:function:: int carte_pioche()

    Renvoie la carte que vous avez pioché au début du tour




.. c:function:: error action_valider(int c)

    Jouer l'action valider une carte



    :param c: La carte à jouer

.. c:function:: error action_defausser(int c1, int c2)

    Jouer l'action défausser deux cartes



    :param c1: La première carte à défausser
    :param c2: La deuxième carte à défausser

.. c:function:: error action_choix_trois(int c1, int c2, int c3)

    Jouer l'action choisir entre trois cartes



    :param c1: La première carte à jouer
    :param c2: La deuxième carte à jouer
    :param c3: La troisième carte à jouer

.. c:function:: error action_choix_paquets(int p1c1, int p1c2, int p2c1, int p2c2)

    Jouer l'action choisir entre deux paquets de deux cartes



    :param p1c1: La première carte du premier paquet à jouer
    :param p1c2: La deuxième carte du premier paquet à jouer
    :param p2c1: La première carte du deuxième paquet à jouer
    :param p2c2: La deuxième carte du deuxième paquet à jouer

.. c:function:: error repondre_choix_trois(int c)

    Choisir une des trois cartes proposées.



    :param c: Le numéro de la carte choisi (0, 1 ou 2)

.. c:function:: error repondre_choix_paquets(int p)

    Choisir un des deux paquets proposés.



    :param p: Le paquet choisi (0 ou 1)

.. c:function:: void afficher_action(action v)

    Affiche le contenu d'une valeur de type action



    :param v: The value to display

.. c:function:: void afficher_error(error v)

    Affiche le contenu d'une valeur de type error



    :param v: The value to display

.. c:function:: void afficher_joueur(joueur v)

    Affiche le contenu d'une valeur de type joueur



    :param v: The value to display

.. c:function:: void afficher_action_jouee(action_jouee v)

    Affiche le contenu d'une valeur de type action_jouee



    :param v: The value to display


Fonctions utilisateur
=====================

.. c:function:: void init_jeu()

    Fonction appelée au début du jeu


.. c:function:: void jouer_tour()

    Fonction appelée au début du tour


.. c:function:: void repondre_action_choix_trois()

    Fonction appelée lors du choix entre les trois cartes lors de l'action de l'adversaire (cf tour_precedent)


.. c:function:: void repondre_action_choix_paquets()

    Fonction appelée lors du choix entre deux paquet lors de l'action de l'adversaire (cf tour_precedent)


.. c:function:: void fin_jeu()

    Fonction appelée à la fin du jeu
